default_skin: conversation_v1
param_specs:
- name: previousNumber
  obj_type: UnicodeString
- name: lowest
  obj_type: UnicodeString
- name: highest
  obj_type: UnicodeString
- name: guess
  obj_type: TemplatedString
- name: precomputeHighest
  obj_type: TemplatedString
- name: precomputeGuess
  obj_type: TemplatedString
- name: precomputeLowest
  obj_type: TemplatedString
- name: MagicianNumber
  obj_type: UnicodeString
- name: tries
  obj_type: UnicodeString
- name: worstnum
  obj_type: TemplatedString
- name: rangeSize
  obj_type: TemplatedString
- name: middle
  obj_type: TemplatedString
- name: OptimalityProxy
  obj_type: TemplatedString
- name: largestValidRange
  obj_type: TemplatedString
- name: upperBound
  obj_type: TemplatedString
- name: lowerBound
  obj_type: TemplatedString
- name: comparison
  obj_type: UnicodeString
- name: newLowest
  obj_type: UnicodeString
- name: newHighest
  obj_type: UnicodeString
states:
- content:
  - type: text
    value: '"So, anyway, he just keeps getting it right and how is that possible,
      I ask you?"<br>You nod along distractedly.&nbsp;<br>She''s leading you briskly
      along a sunny path toward the next town, running excitedly, sometimes in circles,
      sometimes just up the road and back toward you.<br><span style="line-height:
      1.22;"><br>"He''s gotta be cheating. He''s probably in cahoots with... everybody
      in the village! and he tells them what numbers to think of. We need to go and
      figure this out!"</span><br>From experience, you know that she means it. She
      <i>has to</i> figure everything out or she just won''t be able to rest. And
      really, how *can* you rest when you know there''s a possibility of a cheating
      magician right in your town?<br><br>Apparently, this magician can guess, in
      just a few tries, what number anyone is thinking of. Even big numbers, like
      a thousand! If he''s cheating and reading minds, he''s gotta be stopped! And
      if it''s not, you have to meet him and figure out what his secret is!<br><br>"So,
      what do you think? how does he do it?"'
  name: Introduction
  param_changes: []
  widget:
    customization_args:
      columns:
        value: 60
      placeholder:
        value: Type your answer here.
      rows:
        value: 1
    handlers:
    - name: submit
      rule_specs:
      - dest: Town Square
        feedback:
        - '"Well, let''s just pretend you don''t know what binary search is and go
          along with the story for a bit, eh?"'
        inputs:
          x: binary
        name: Contains
        param_changes: []
      - dest: Picking in the middle
        feedback: []
        inputs:
          x: middle
        name: Contains
        param_changes: []
      - dest: Town Square
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: TextInput
- content:
  - type: text
    value: 'You arrive at the town square. There''s a magician standing here, and
      a small crowd of locals surrounding him.&nbsp;<br><br>"{{previousNumber}}!"
      he exclaims dramatically, pointing his wand at one of the locals. The crowd''s
      collective gaze shifts from the magician to the local.<br><br><span style="line-height:
      1.22;">"That''s right!" says the local, and the crowd oohs and aahs in appreciation
      of the Magician''s number-guessing powers.<br></span><br>...<br><br>"You there!"
      the magician points to you<br>"Think of a number between 1 and 85!"'
  name: Town Square
  param_changes:
  - name: previousNumber
    obj_type: UnicodeString
    values:
    - '27'
    - '485'
    - '692'
    - '950'
    - '378'
    - '93'
    - '858'
    - '203'
    - '869'
  - name: lowest
    obj_type: UnicodeString
    values:
    - '1'
  - name: highest
    obj_type: UnicodeString
    values:
    - '86'
  widget:
    customization_args:
      buttonText:
        value: OK, I've thought of a number!
    handlers:
    - name: submit
      rule_specs:
      - dest: Magician Guesses
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: Continue
- content:
  - type: text
    value: '"Is it {{guess}}?"'
  name: Magician Guesses
  param_changes:
  - name: guess
    obj_type: TemplatedString
    values:
    - '{{[lowest|int/2]|sum(start=highest|int/2)|int}}'
  widget:
    customization_args:
      choices:
        value:
        - No, it's smaller
        - No, it's bigger
        - Yes, that's correct!
    handlers:
    - name: submit
      rule_specs:
      - dest: lower-reguess
        feedback: []
        inputs:
          x: 0
        name: Equals
        param_changes: []
      - dest: higher-reguess
        feedback: []
        inputs:
          x: 1
        name: Equals
        param_changes: []
      - dest: correct
        feedback: []
        inputs:
          x: 2
        name: Equals
        param_changes: []
      - dest: correct
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: '"Is it {{guess}}?"'
  name: lower-reguess
  param_changes:
  - name: highest
    obj_type: UnicodeString
    values:
    - '{{guess}}'
  - name: guess
    obj_type: TemplatedString
    values:
    - '{{[lowest|int/2]|sum(start=highest|int/2)|int}}'
  - name: precomputeHighest
    obj_type: TemplatedString
    values:
    - '{{guess}}'
  - name: precomputeGuess
    obj_type: TemplatedString
    values:
    - '{{[lowest|int/2]|sum(start=precomputeHighest|int/2)|int}}'
  widget:
    customization_args:
      choices:
        value:
        - No, it's smaller
        - No, it's bigger
        - Yes, that's right!
    handlers:
    - name: submit
      rule_specs:
      - dest: lower-reguess
        feedback:
        - Is it {{precomputeGuess}}?
        inputs:
          x: 0
        name: Equals
        param_changes: []
      - dest: higher-reguess
        feedback: []
        inputs:
          x: 1
        name: Equals
        param_changes: []
      - dest: correct
        feedback: []
        inputs:
          x: 2
        name: Equals
        param_changes: []
      - dest: correct
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: '"Is it {{guess}}"?'
  name: higher-reguess
  param_changes:
  - name: lowest
    obj_type: UnicodeString
    values:
    - '{{guess}}'
  - name: guess
    obj_type: TemplatedString
    values:
    - '{{[lowest|int/2]|sum(start=highest|int/2)|int}}'
  - name: precomputeLowest
    obj_type: TemplatedString
    values:
    - '{{guess}}'
  - name: precomputeGuess
    obj_type: TemplatedString
    values:
    - '{{[precomputeLowest|int/2]|sum(start=highest|int/2)|int}}'
  widget:
    customization_args:
      choices:
        value:
        - No, it's smaller
        - No, it's bigger
        - Yes, that's right!
    handlers:
    - name: submit
      rule_specs:
      - dest: lower-reguess
        feedback: []
        inputs:
          x: 0
        name: Equals
        param_changes: []
      - dest: higher-reguess
        feedback:
        - Is it {{precomputeGuess}}?
        inputs:
          x: 1
        name: Equals
        param_changes: []
      - dest: correct
        feedback: []
        inputs:
          x: 2
        name: Equals
        param_changes: []
      - dest: correct
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: The crowd goes wild again!<br>"Do you want to play again?" asks the magician.
      "I'll even let you pick a bigger number this time!"
  name: correct
  param_changes: []
  widget:
    customization_args:
      choices:
        value:
        - Let's play again
        - No, I've got enough data for now
        - This time, I want to try guessing!
    handlers:
    - name: submit
      rule_specs:
      - dest: Pick Limit for Magician
        feedback: []
        inputs:
          x: 0
        name: Equals
        param_changes: []
      - dest: Discussion Start
        feedback: []
        inputs:
          x: 1
        name: Equals
        param_changes: []
      - dest: Player Guess Setup
        feedback: []
        inputs:
          x: 2
        name: Equals
        param_changes: []
      - dest: correct
        feedback:
        - ERROR
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: '"OK, how big of a number do you want me to guess?"'
  name: Pick Limit for Magician
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Pick Limit for Magician
        feedback:
        - '"No, that could take me more than 19 guesses! Then everyone would get bored.
          Try something smaller than a million."'
        inputs:
          x: 1000000.0
        name: IsGreaterThan
        param_changes: []
      - dest: Think of a number
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"So, how do you think he does it?" asks your friend.'
  name: Discussion Start
  param_changes: []
  widget:
    customization_args:
      columns:
        value: 60
      placeholder:
        value: Type your answer here.
      rows:
        value: 1
    handlers:
    - name: submit
      rule_specs:
      - dest: Ranges
        feedback: []
        inputs:
          x: half
        name: Contains
        param_changes: []
      - dest: Ranges
        feedback: []
        inputs:
          x: halves
        name: Contains
        param_changes: []
      - dest: Picking in the middle
        feedback: []
        inputs:
          x: middle
        name: Contains
        param_changes: []
      - dest: Picking in the middle
        feedback: []
        inputs:
          x: divide
        name: Contains
        param_changes: []
      - dest: Discussion Start
        feedback:
        - '"What does binary mean?"'
        inputs:
          x: binary
        name: Contains
        param_changes: []
      - dest: Degenerate Case
        feedback:
        - '"Hmm, I have a thought..."'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: TextInput
- content:
  - type: text
    value: '"OK, I''m thinking of a number between 1 and 100!<br>make a guess and
      I''ll tell you if it''s bigger or smaller!<br>See if you can get it in 7 guesses!"'
  name: Player Guess Setup
  param_changes:
  - name: MagicianNumber
    obj_type: UnicodeString
    values:
    - '5'
    - '16'
    - '30'
    - '38'
    - '47'
    - '55'
    - '66'
    - '80'
    - '83'
    - '97'
  - name: tries
    obj_type: UnicodeString
    values:
    - '1'
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: PlayerCorrect
        feedback:
        - '"Hey, that''s right! first try - beginner''s luck!"'
        inputs:
          x: '{{MagicianNumber}}'
        name: Equals
        param_changes: []
      - dest: PlayerGuessing
        feedback:
        - '"No, it''s smaller than that!"'
        inputs:
          x: '{{MagicianNumber}}'
        name: IsGreaterThan
        param_changes: []
      - dest: PlayerGuessing
        feedback:
        - '"No, it''s bigger than that!"'
        inputs:
          x: '{{MagicianNumber}}'
        name: IsLessThan
        param_changes: []
      - dest: PlayerGuessing
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"The trick to keeping track of the range is that you only have to remember
      two numbers - the lowest and highest possible number. But these numbers are
      <b>variable</b> - one of them changes every time you make a guess."<br><br>"So
      if we''re guessing a number between 1 and 10, then at first we know that the
      number is <b>greater than</b> 0, and <b>smaller than</b> 11. Or we can just
      say it''s 0-11"<br><br>"Then, suppose we guess 5, and the Magician says it''s
      bigger than that."<br><br>"Now we just have to remember that it''s <b>greater
      than</b> 5, but <b>smaller than</b> 11. In other words, the range is 5-11 "<br><br>"Now
      suppose after that, we guess 7; and the Magician says it''s smaller than that!"<br><br>"What
      is the range now? put it in the same format as ''0-11'' or ''5-11'' from before."'
  name: Ranges
  param_changes: []
  widget:
    customization_args:
      columns:
        value: 60
      placeholder:
        value: Type your answer here.
      rows:
        value: 1
    handlers:
    - name: submit
      rule_specs:
      - dest: practice ranges
        feedback:
        - '"You got it!"'
        inputs:
          x: 5-7
        name: Contains
        param_changes: []
      - dest: Ranges
        feedback:
        - That's not right... Remember, we already knew it was greater than 5. And
          the magician gave us a new number it's smaller than.
        - That's not right... Remember, the magician told us it's smaller than 7.
          And we already had a number it was greater than.
        inputs:
          x: '-'
        name: Contains
        param_changes: []
      - dest: Ranges
        feedback:
        - 'I don''t think you''ve got the format right - it should be something like:

          X-Y except X and Y will be numbers.'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: TextInput
- content:
  - type: text
    value: '"OK, think of a number between {{lowest}} and {{highest|int-1}}"!'
  name: Think of a number
  param_changes:
  - name: highest
    obj_type: UnicodeString
    values:
    - '{{answer|int+1}}'
  - name: lowest
    obj_type: UnicodeString
    values:
    - '1'
  widget:
    customization_args:
      buttonText:
        value: I thought of a number!
    handlers:
    - name: submit
      rule_specs:
      - dest: Magician Guesses
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: Continue
- content: []
  name: PlayerGuessing
  param_changes:
  - name: tries
    obj_type: UnicodeString
    values:
    - '{{[tries|int]|sum(start=1)}}'
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: PlayerCorrect
        feedback:
        - '"That''s right!"'
        inputs:
          x: '{{MagicianNumber}}'
        name: Equals
        param_changes: []
      - dest: PlayerGuessing
        feedback:
        - '"No, it''s bigger than that!"'
        inputs:
          x: '{{MagicianNumber}}'
        name: IsLessThan
        param_changes: []
      - dest: PlayerGuessing
        feedback:
        - '"No, it''s smaller than that!"'
        inputs:
          x: '{{MagicianNumber}}'
        name: IsGreaterThan
        param_changes: []
      - dest: PlayerGuessing
        feedback:
        - '"This should never happen"'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"Pretty good! That only took you {{tries}} tries!"'
  name: PlayerCorrect
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: correct
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: Continue
- content:
  - type: text
    value: ''
  name: Picking in the middle
  param_changes: []
  widget:
    customization_args:
      choices:
        value:
        - The real number is less than 7, so it's between 1 and 6 (6 number range)
        - The real number IS 7 (so we win!)
        - The real number is bigger than 7, so it's between 8 and 10 (3 number range)
    handlers:
    - name: submit
      rule_specs:
      - dest: Middle try it out
        feedback:
        - '"Exactly! A range of 6 numbers is worse than a range of 3 numbers, and
          certainly worse than being right on the first try!"'
        inputs:
          x: 0
        name: Equals
        param_changes: []
      - dest: Picking in the middle
        feedback:
        - '"No, that doesn''t make sense. Winning is the best possible thing, not
          the worst!"'
        inputs:
          x: 1
        name: Equals
        param_changes: []
      - dest: Picking in the middle
        feedback:
        - '"No, I don''t think so. In this case we would have a range of just 3 numbers
          left to guess. There''s a worse case."'
        inputs:
          x: 2
        name: Equals
        param_changes: []
      - dest: Middle try it out
        feedback:
        - ERROR
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: '"I like starting with really simple cases. Sometimes it turns out it''s
      obvious how to get to the more complex ones from there!"<br><br>"The simplest
      thing would be if I had to guess a number from 1 to 1. Then I know the answer
      in one try - it''s 1!"<br><br>"OK, the next simplest thing is if I had a number
      between 1 and 2. How many tries would I need?.."'
  name: Degenerate Case
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Three Case
        feedback:
        - '"Right! since it can only be 1 or 2, whatever I choose first, I could be
          wrong; but then I can always get it right on the second try"'
        inputs:
          x: 2.0
        name: Equals
        param_changes: []
      - dest: Degenerate Case
        feedback:
        - '"I don''t think I can always get it that fast though. If you''re thinking
          of a 1 or a 2 and I''m just guessing, there''s always a chance I don''t
          get it right at first."'
        inputs:
          x: 2.0
        name: IsLessThan
        param_changes: []
      - dest: Degenerate Case
        feedback:
        - '"No, I don''t think I would ever need that many tries... All I''m trying
          to do is guess whether you''re thinking 1 or 2!"'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"OK, that was pretty simple. But what if it''s a number between 1 and
      3? Now I think there''s some kind of trick I can use to make it go faster."<br>"How
      many tries do I need to guess a range of 3 numbers?"'
  name: Three Case
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Three Case
        feedback:
        - '"No, I don''t think I ever need more than 3 guesses if I''m only guessing
          3 numbers."'
        inputs:
          x: 3.0
        name: IsGreaterThan
        param_changes: []
      - dest: Explain two guesses
        feedback:
        - '"Oh! You think we can still do it in 2?"'
        inputs:
          x: 2.0
        name: Equals
        param_changes: []
      - dest: 3 case 3 tries
        feedback: []
        inputs:
          x: 3.0
        name: Equals
        param_changes: []
      - dest: Three Case
        feedback:
        - '"But I made the range bigger! how can I possible need fewer guesses now?"'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"So, what''s the best guess to make first if I''m trying to guess a number
      between 1 and 3 in just two tries?"<br><br>"I want it to work all the time,
      so let''s think about what is the <b>best</b> thing to do in the <b>worst</b>
      case!"'
  name: Explain two guesses
  param_changes: []
  widget:
    customization_args:
      choices:
        value:
        - '1'
        - '2'
        - '3'
    handlers:
    - name: submit
      rule_specs:
      - dest: Explain two guesses
        feedback:
        - '"But then in the worst case, the number could be either 2 or 3, and we''d
          only have one try left to pick between those two! And all we would know
          is that it''s bigger than 1!"'
        inputs:
          x: 0
        name: Equals
        param_changes: []
      - dest: Explain two guesses
        feedback:
        - '"But then in the worst case, the number could be either 1 or 2, and we''d
          only have one try left to pick between those two. And all we would know
          is that it''s smaller than 3!"'
        inputs:
          x: 2
        name: Equals
        param_changes: []
      - dest: After three case
        feedback:
        - '"Interesting! If we pick 2 the first time, then in the worst case the number
          is either 1 or 3. But the Magician will also tell us if the number is smaller
          or greater than our guess! So we''ll be able to tell whether it''s 1 or
          3 because we''ll know if it''s bigger or smaller than 2!"'
        inputs:
          x: 1
        name: Equals
        param_changes: []
      - dest: Explain two guesses
        feedback:
        - '"There should be no default"'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: '"There''s gotta be a trick to make it go faster, though. It''s way too
      slow if I just ask about each number one at a time. Then to guess 1000 numbers,
      I would need 1000 tries! And the magician does it so much faster."<br><br>"So
      we need to make one guess eliminate more than one number. Hmm, how do we do
      that?"<br>'
  name: 3 case 3 tries
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Explain two guesses
        feedback:
        - '"Oh yeah! when the magician responds to our guess, he also tells us if
          his number is bigger or smaller!"'
        inputs:
          x: bigger
        name: Contains
        param_changes: []
      - dest: Explain two guesses
        feedback:
        - '"Oh yeah! when the magician responds to our guess, he also tells us if
          his number is bigger or smaller!"'
        inputs:
          x: smaller
        name: Contains
        param_changes: []
      - dest: Explain two guesses
        feedback: []
        inputs:
          x: lower
        name: Contains
        param_changes: []
      - dest: Explain two guesses
        feedback:
        - '"Oh yeah! when the magician responds to our guess, he also tells us if
          his number is bigger or smaller!"'
        inputs:
          x: higher
        name: Contains
        param_changes: []
      - dest: After three case
        feedback:
        - '"Oh! so if we guess ''2'' as our first try, then we know what number to
          guess on the second try, even if 2 wasn''t right!"'
        inputs:
          x: '2'
        name: Contains
        param_changes: []
      - dest: After three case
        feedback:
        - '"Oh! so if we guess ''2'' as our first try, then we know what number to
          guess on the second try, even if 2 wasn''t right!"'
        inputs:
          x: two
        name: Contains
        param_changes: []
      - dest: 3 case 3 tries
        feedback:
        - '"What kind of extra information does the magician give us?"'
        - '"What else do we know about the magician''s number after we make our guess?"'
        - '"What can we use to eliminate more than one number with our first guess?"'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: TextInput
- content:
  - type: image
    value: ''
  - type: text
    value: picture goes here.<br><br>
  - type: text
    value: '"So, no matter which number the magician is thinking of, if we guess 2
      on our first try, we can eliminate two numbers! Then for the second try (if
      we even need it), we know exactly what number to guess!"<br><br>"So maybe we
      don''t save TOO much time by being able to guess a number between 1-3 in just
      two tries... but I wonder what we could do with one more try?"'
  name: After three case
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Doubling range concept
        feedback: []
        inputs:
          x: double
        name: Contains
        param_changes: []
      - dest: Doubling range concept
        feedback: []
        inputs:
          x: twice
        name: Contains
        param_changes: []
      - dest: Doubling range concept
        feedback: []
        inputs:
          x: two
        name: Contains
        param_changes: []
      - dest: Doubling range concept
        feedback:
        - '"Six! Whoa, that''s twice as many!"'
        inputs:
          x: '6'
        name: Contains
        param_changes: []
      - dest: Doubling range concept
        feedback:
        - '"Six! Whoa, that''s twice as many!"'
        inputs:
          x: six
        name: Contains
        param_changes: []
      - dest: 3 tries 7 numbers
        feedback: []
        inputs:
          x: '7'
        name: Contains
        param_changes: []
      - dest: 3 tries 7 numbers
        feedback: []
        inputs:
          x: seven
        name: Contains
        param_changes: []
      - dest: Reduce 3 guesses to 2
        feedback:
        - '"Here is another thing I like to do when I''m thinking about a hard question.
          I try to imagine what the world would be like if I already knew the answer,
          and what it would feel like."'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: TextInput
- content:
  - type: text
    value: '"Cool! how would you do that?"<br><br>"If you were guessing a number between
      1 and 7 and you only had three tries, what would your first guess be?"'
  name: 3 tries 7 numbers
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Three tries explanation
        feedback:
        - '"I see! So if the magician said it was smaller than that, we would be back
          to the ''between 1 and 3'' case!"


          "And of course if it was equal to 4, we would be done!"


          "But what if he said it was bigger than 4? Then we would still have to guess
          a number between 5 and 7... But wait, that''s the same thing as between
          1 and 3, just shifted over!"'
        inputs:
          x: 4.0
        name: Equals
        param_changes: []
      - dest: 3 tries 7 numbers
        feedback:
        - '"OK, but what if the magician says that his number is greater than {{answer}}?
          Then we would only have two tries left, but we would have to guess a number
          between {{[answer|int]|sum(start=1)}} and 7. That''s {{[7|int]|sum(start=-answer)}}
          possible options! I don''t think we could do that in 2 tries."'
        inputs:
          x: 4.0
        name: IsLessThan
        param_changes: []
      - dest: 3 tries 7 numbers
        feedback:
        - '"OK, but what if the magician says that his number is smaller than {{answer}}?
          Then we would only have two tries left, but we would have to guess a number
          between 1 and {{[answer|int]|sum(start=-1)}}. That''s {{[answer|int]|sum(start=-1)}}
          possible options! I don''t think we could do that in 2 tries. We can do
          between 1 and 3 in 2 tries though..."'
        inputs:
          x: 4.0
        name: IsGreaterThan
        param_changes: []
      - dest: 3 tries 7 numbers
        feedback:
        - But that's not even between 1 and 7!
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"You think we can <b>double</b> our range with just one more try? But
      how?"<br><br>"Oh, I think I see! when the number was between 1 and 3, and we
      guessed 2, we were cutting it right in the middle!"<br><br>"OK, if we''re guessing
      a number between 1 and 6, what should we guess to cut the range in half?"'
  name: Doubling range concept
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Add one more
        feedback:
        - '"So if the magician said it was smaller than that, we would be back to
          the ''between 1 and {{[answer|int]|sum(start=-1)}}'' case!"


          "And of course if it was equal to {{answer}}, we would be done!"


          "But what if he said it was bigger than {{answer}}? Then we would still
          have to guess a number between {{[answer|int]|sum(start=1)}} and 6... But
          wait, that''s the same thing as between 1 and {{[6]|sum(start=-answer|int)}},
          just shifted over a bit!"'
        inputs:
          a: 3.0
          b: 4.0
        name: IsInclusivelyBetween
        param_changes: []
      - dest: Doubling range concept
        feedback:
        - '"OK, but what if the magician says that his number is greater than {{answer}}?
          Then we would only have two tries left, but we would have to guess a number
          between {{[answer|int]|sum(start=1)}} and 6. That''s {{[6|int]|sum(start=-answer)}}
          possible options! I don''t think we could do that in 2 tries."'
        inputs:
          x: 3.0
        name: IsLessThan
        param_changes: []
      - dest: Doubling range concept
        feedback:
        - '"OK, but what if the magician says that his number is smaller than {{answer}}?
          Then we would only have two tries left, but we would have to guess a number
          between 1 and {{[answer|int]|sum(start=-1)}}. That''s {{[answer|int]|sum(start=-1)}}
          possible options! I don''t think we could do that in 2 tries. We can do
          between 1 and 3 in 2 tries though..."'
        inputs:
          x: 4.0
        name: IsGreaterThan
        param_changes: []
      - dest: Doubling range concept
        feedback:
        - ERROR
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"Suppose I knew that I could guess a number from 1 to SOMETHING with three
      guesses, and I knew exactly what my first guess should be to do this. After
      I made the first guess, I would have two guesses left. And we already know something
      we can do with two guesses!"<br>"So let''s pretend that after my first guess,
      we see the same two-guess case that we saw before:"'
  - type: text
    value: Picture goes here
  - type: text
    value: '"This must mean that our first guess, and the information the magician
      gave us in response, narrowed down our possibilities to numbers between 1 and
      3."<br><br>"What could his response have been?"'
  name: Reduce 3 guesses to 2
  param_changes: []
  widget:
    customization_args:
      choices:
        value:
        - The number is bigger than your guess
        - The number is smaller than your guess
        - Your guess is correct
    handlers:
    - name: submit
      rule_specs:
      - dest: Reduce 3 guesses to 2
        feedback:
        - '"But if our first guess was correct, we wouldn''t need any more guesses!"'
        inputs:
          x: 2
        name: Equals
        param_changes: []
      - dest: Reduce 3 guesses to 2
        feedback:
        - '"No, I don''t think we could ever make a reasonable guess where the number
          turned out to be between 1 and 3 and was bigger than our guess"'
        inputs:
          x: 0
        name: Equals
        param_changes: []
      - dest: Reduce2 - what was the guess
        feedback:
        - '"Yeah, that sounds right! if we narrowed it down to between 1 and 3, then
          it''s a pretty small number, and we must have guessed something slightly
          bigger!"'
        inputs:
          x: 1
        name: Equals
        param_changes: []
      - dest: Reduce 3 guesses to 2
        feedback:
        - ERROR
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: '"OK, so if the magician said that the number is less than our guess, and
      that told us that the number is between 1 and 3, what must our guess have been?"'
  name: Reduce2 - what was the guess
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: What if it was bigger than 4
        feedback: []
        inputs:
          x: 4.0
        name: Equals
        param_changes: []
      - dest: Reduce2 - what was the guess
        feedback:
        - '"Hmm, but if the number was less than {{answer}}, wouldn''t it be between
          1 and {{[answer|int]|sum(start=-1)}}?"'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"Alright! So what do we know so far?"<br><br>"We are trying to guess a
      number in 3 tries. And we decided that on our first try, we should guess the
      number 4."<br><br>"If the magician says his number is less than 4, we already
      know what to do, and we can definitely guess that number in 2 more tries!"'
  - type: text
    value: Picture of partial binary search tree w/root at 4.
  - type: text
    value: '"OK, now suppose we guessed 4 but the magician told us his number was
      bigger than that!"<br><br>"Now we have two tries left, and we know that the
      number is between 5 and SOMETHING... and we''re trying to figure out what that
      SOMETHING can be, so that we can still do this in two tries."<br><br>"I have
      a feeling that we can do almost the same thing as in our ''between 1 and 3''
      case, just... shifted."<br><br>"What do you think our SOMETHING limit should
      be?"'
  name: What if it was bigger than 4
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Three tries explanation
        feedback:
        - '"Aha! ''between 5 and 7'' is just like ''between 1 and 3'' but shifted
          over to be bigger than 4!"'
        inputs:
          x: 7.0
        name: Equals
        param_changes: []
      - dest: What if it was bigger than 4
        feedback:
        - '"Wait, that doesn''t make sense! how can a number be greater than 4 but
          less than {{answer}}?"'
        inputs:
          x: 5.0
        name: IsLessThan
        param_changes: []
      - dest: What if it was bigger than 4
        feedback:
        - '"Hmm, I suppose it''s pretty easy to guess a number between 5 and {{answer}}
          in 2 tries, but I think we can do even better!"'
        inputs:
          x: 7.0
        name: IsLessThan
        param_changes: []
      - dest: What if it was bigger than 4
        feedback:
        - But there are {{[answer|int]|sum(start=-4)}} numbers between 5 and {{answer}}!
          I don't think we can always find the right number in 2 tries if the range
          is that big.
        inputs:
          x: 7.0
        name: IsGreaterThan
        param_changes: []
      - dest: What if it was bigger than 4
        feedback:
        - ERROR
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: Picture of full binary search tree with 7 nodes here
  - type: text
    value: '"Wow! having three tries means that we can guess any number from 1 to
      7! That''s a lot better than what we could do with 2 tries!"<br><br>"In fact,
      the extra try more than doubled our range! On the first guess, we split our
      range into two, and then no matter what the magician answers, we only have to
      deal with <b>half</b> the remaining numbers."<br><br>I think we can <b>generalize</b>
      this - the idea of halving the range can apply in general, to any range of numbers!"<br><br>"What
      do you think?"'
  name: Three tries explanation
  param_changes: []
  widget:
    customization_args:
      choices:
        value:
        - I'm not sure what you mean yet. Tell me more!
        - I think I understand! Let me try guessing!
        - Hmm, that's interesting. Let's watch the magician some more - is that what
          he does, too?
    handlers:
    - name: submit
      rule_specs:
      - dest: Picking in the middle
        feedback: []
        inputs:
          x: 0
        name: Equals
        param_changes: []
      - dest: Worst Case start
        feedback: []
        inputs:
          x: 1
        name: Equals
        param_changes: []
      - dest: Magician or Player guess
        feedback: []
        inputs:
          x: 2
        name: Equals
        param_changes: []
      - dest: Three tries explanation
        feedback:
        - ERROR
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: '"So, we can divide the range into two halves by guessing a number in the
      middle! and then, both of those half-ranges is at most 3 numbers long, so even
      in the worst case, we know how to find that number in two more tries!"<br><br>"But
      wait - our number wasn''t exactly in the middle... in fact, there''s no exact
      middle for numbers between 1 and 6. And one of our ''halves'' actually turned
      out to be a bit smaller!"<br><br>"So that must mean..."'
  name: Add one more
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Three tries explanation
        feedback:
        - '"Exactly!"'
        inputs:
          x: '7'
        name: Contains
        param_changes: []
      - dest: Three tries explanation
        feedback:
        - '"Yeah!"'
        inputs:
          x: seven
        name: Contains
        param_changes: []
      - dest: Three tries explanation
        feedback:
        - '"That''s what I was thinking!"'
        inputs:
          x: '"one more"'
        name: Contains
        param_changes: []
      - dest: Three tries explanation
        feedback:
        - '"... That we can actually add one more number to the range! We can do numbers
          from 1 to 7 in three tries!"'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: TextInput
- content:
  - type: text
    value: '"OK, but just to be sure our strategy works in all cases, instead of <i>really</i>
      thinking of a number, I''m going to give you the <b>worst-case </b>answer every
      time you pick. That way, we can be sure that this trick will work<b> at least
      </b>as well in all the other cases, and maybe even better!"<br>'
  name: Worst Case start
  param_changes:
  - name: lowest
    obj_type: UnicodeString
    values:
    - '0'
  - name: highest
    obj_type: UnicodeString
    values:
    - '31'
  - name: tries
    obj_type: UnicodeString
    values:
    - '0'
  widget:
    customization_args:
      buttonText:
        value: Got it! I'm ready!
    handlers:
    - name: submit
      rule_specs:
      - dest: Worst Case Guess
        feedback:
        - '"OK, try to guess a number between 1 and 30!"'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: Continue
- content:
  - type: text
    value: You wave your hand until you get the Magician's attention.<br><br>"Ah,
      welcome back! Would you like to think of a number and see how quickly I can
      guess it? or would you like to try guessing yourself?"
  name: Magician or Player guess
  param_changes: []
  widget:
    customization_args:
      choices:
        value:
        - Magician guesses my number
        - I guess Magician's number
    handlers:
    - name: submit
      rule_specs:
      - dest: Pick Limit for Magician
        feedback: []
        inputs:
          x: 0
        name: Equals
        param_changes: []
      - dest: Player Guess Setup
        feedback: []
        inputs:
          x: 1
        name: Equals
        param_changes: []
      - dest: Magician or Player guess
        feedback:
        - ERROR
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: ' '
  name: Worst Case Guess
  param_changes:
  - name: worstnum
    obj_type: TemplatedString
    values:
    - '{{lowest|int+1 if (highest|int-lowest|int)<=3 else -1}}'
  - name: rangeSize
    obj_type: TemplatedString
    values:
    - '{{highest|int-lowest|int-1}}'
  - name: tries
    obj_type: UnicodeString
    values:
    - '{{tries|int+1}}'
  - name: middle
    obj_type: TemplatedString
    values:
    - '{{(highest|int+lowest|int)/2}}'
  - name: largestValidRange
    obj_type: TemplatedString
    values:
    - '{{2**((rangeSize|float)|log_floor)-1}}'
  - name: upperBound
    obj_type: TemplatedString
    values:
    - '{{lowest|int+largestValidRange|int+1}}'
  - name: lowerBound
    obj_type: TemplatedString
    values:
    - '{{highest|int-largestValidRange|int-1}}'
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Ranges
        feedback:
        - '"Wait, but I already said that the number is bigger than {{lowest}}!

          Hmm, there''s gotta be a better way of keeping track of that than just looking
          through all the answers all the time..."'
        inputs:
          x: '{{lowest}}'
        name: IsLessThanOrEqualTo
        param_changes: []
      - dest: Ranges
        feedback:
        - "\"Wait, but I already said that the number is smaller than {{highest}}!\
          \ \nHmm, there's gotta be a better way of keeping track of this than just\
          \ looking through all the previous answers all the time.\""
        inputs:
          x: '{{highest}}'
        name: IsGreaterThanOrEqualTo
        param_changes: []
      - dest: Worst Case Finished
        feedback:
        - That's right!
        inputs:
          x: '{{worstnum}}'
        name: Equals
        param_changes: []
      - dest: worst case bigger
        feedback:
        - '"Let''s say that the number is bigger than that"'
        inputs:
          x: '{{middle}}'
        name: IsLessThan
        param_changes: []
      - dest: worst case smaller
        feedback:
        - '"Let''s say that the number is smaller than that"'
        inputs:
          x: '{{middle}}'
        name: IsGreaterThanOrEqualTo
        param_changes: []
      - dest: Picking in the middle
        feedback:
        - '"Hmm, I don''t know if that was the best guess to make.

          Suppose I say that the number is smaller than that. Then we know that the
          number has to be bigger than {{lowest}} but smaller than {{answer}}. But
          that still leaves a range of {{answer|int-lowest|int-2}} numbers! I think
          that''s too many, we can do better."'
        inputs:
          x: '{{upperBound}}'
        name: IsGreaterThan
        param_changes: []
      - dest: Picking in the middle
        feedback:
        - '"Hmm, I don''t know if that was the best guess to make.

          Suppose I say that the number is bigger than that. Then we know that the
          number has to be bigger than {{answer}} but smaller than {{highest}}. But
          that still leaves a range of {{highest|int-answer|int-2}} numbers! I think
          that''s too many, we can do better."'
        inputs:
          x: '{{lowerBound}}'
        name: IsLessThan
        param_changes: []
      - dest: Worst Case Guess
        feedback:
        - '{{rangeSize}}

          {{worstnum}}

          {{answer}}

          {{middle}}'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"Wow, that''s pretty good!" - says the Magician. "You figured out my trick!"<br><br>You
      suddenly realize that he''s been watching you practice.<br><br>"So I guess you
      weren''t really cheating!" - says your friend<br>"You just knew what the best
      questions to as were to get the answer really quickly!"<br><br>"That''s right!
      I''m actually pretty lazy. So when people ask me to guess a number from 1 to
      1000 I really don''t feel like going through 1000 numbers! So I figured out
      what I can do so I don''t have to do too much! See?"<br>He shows you his hand.
      It''s covered in ink scribblings.<br><br>"Just like we did!"<br><br>"That''s
      right! &nbsp;I call these little notes <b>algorithms</b>. Hey, you guys are
      pretty clever - maybe you can help me figure out another one! You see, I really
      want to travel to a Far Away land, but I really don''t want to travel more than
      I have to. So I was thinking..."<br><br>The three of you walk off along a winding
      path, planning your next adventure...<br><br>'
  name: Worst Case Finished
  param_changes:
  - name: OptimalityProxy
    obj_type: TemplatedString
    values:
    - '{{'''' if (tries|int)<=5 else ''false''}}'
  widget:
    customization_args:
      buttonText:
        value: End of Chapter 1
    handlers:
    - name: submit
      rule_specs:
      - dest: END
        feedback: []
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: Continue
- content: []
  name: worst case smaller
  param_changes:
  - name: highest
    obj_type: UnicodeString
    values:
    - '{{answer}}'
  - name: guess
    obj_type: TemplatedString
    values:
    - '{{answer}}'
  - name: worstnum
    obj_type: TemplatedString
    values:
    - '{{lowest|int+1 if (highest|int-lowest|int)<=3 else -1}}'
  - name: rangeSize
    obj_type: TemplatedString
    values:
    - '{{highest|int-lowest|int-1}}'
  - name: tries
    obj_type: UnicodeString
    values:
    - '{{tries|int+1}}'
  - name: middle
    obj_type: TemplatedString
    values:
    - '{{(highest|int+lowest|int)/2}}'
  - name: largestValidRange
    obj_type: TemplatedString
    values:
    - '{{2**((rangeSize|float)|log_floor)-1}}'
  - name: upperBound
    obj_type: TemplatedString
    values:
    - '{{lowest|int+largestValidRange|int+1}}'
  - name: lowerBound
    obj_type: TemplatedString
    values:
    - '{{highest|int-largestValidRange|int-1}}'
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Ranges
        feedback:
        - '"Wait, but I already said that the number is bigger than {{lowest}}!

          Hmm, there''s gotta be a better way of keeping track of that than just looking
          through all the answers all the time..."'
        inputs:
          x: '{{lowest}}'
        name: IsLessThanOrEqualTo
        param_changes: []
      - dest: Ranges
        feedback:
        - "\"Wait, but I already said that the number is smaller than {{highest}}!\
          \ \nHmm, there's gotta be a better way of keeping track of this than just\
          \ looking through all the previous answers all the time.\""
        inputs:
          x: '{{highest}}'
        name: IsGreaterThanOrEqualTo
        param_changes: []
      - dest: Worst Case Finished
        feedback:
        - That's right!
        inputs:
          x: '{{worstnum}}'
        name: Equals
        param_changes: []
      - dest: worst case bigger
        feedback:
        - '"Let''s say that the number is bigger than that"'
        inputs:
          x: '{{middle}}'
        name: IsLessThan
        param_changes: []
      - dest: worst case smaller
        feedback:
        - '"Let''s say that the number is smaller than that"'
        inputs:
          x: '{{middle}}'
        name: IsGreaterThanOrEqualTo
        param_changes: []
      - dest: Picking in the middle
        feedback:
        - '"Hmm, I don''t know if that was the best guess to make.

          Suppose I say that the number is smaller than that. Then we know that the
          number has to be bigger than {{lowest}} but smaller than {{answer}}. But
          that still leaves a range of {{answer|int-lowest|int-2}} numbers! I think
          that''s too many, we can do better."'
        inputs:
          x: '{{upperBound}}'
        name: IsGreaterThan
        param_changes: []
      - dest: Picking in the middle
        feedback:
        - '"Hmm, I don''t know if that was the best guess to make.

          Suppose I say that the number is bigger than that. Then we know that the
          number has to be bigger than {{answer}} but smaller than {{highest}}. But
          that still leaves a range of {{highest|int-answer|int-2}} numbers! I think
          that''s too many, we can do better."'
        inputs:
          x: '{{lowerBound}}'
        name: IsLessThan
        param_changes: []
      - dest: Worst Case Guess
        feedback:
        - '{{rangeSize}}

          {{worstnum}}

          {{answer}}

          {{middle}}'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content: []
  name: worst case bigger
  param_changes:
  - name: lowest
    obj_type: UnicodeString
    values:
    - '{{answer}}'
  - name: guess
    obj_type: TemplatedString
    values:
    - '{{answer}}'
  - name: worstnum
    obj_type: TemplatedString
    values:
    - '{{lowest|int+1 if (highest|int-lowest|int)<=3 else -1}}'
  - name: rangeSize
    obj_type: TemplatedString
    values:
    - '{{highest|int-lowest|int-1}}'
  - name: tries
    obj_type: UnicodeString
    values:
    - '{{tries|int+1}}'
  - name: middle
    obj_type: TemplatedString
    values:
    - '{{(highest|int+lowest|int)/2}}'
  - name: largestValidRange
    obj_type: TemplatedString
    values:
    - '{{2**((rangeSize|float)|log_floor)-1}}'
  - name: upperBound
    obj_type: TemplatedString
    values:
    - '{{lowest|int+largestValidRange|int+1}}'
  - name: lowerBound
    obj_type: TemplatedString
    values:
    - '{{highest|int-largestValidRange|int-1}}'
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Ranges
        feedback:
        - '"Wait, but I already said that the number is bigger than {{lowest}}!

          Hmm, there''s gotta be a better way of keeping track of that than just looking
          through all the answers all the time..."'
        inputs:
          x: '{{lowest}}'
        name: IsLessThanOrEqualTo
        param_changes: []
      - dest: Ranges
        feedback:
        - "\"Wait, but I already said that the number is smaller than {{highest}}!\
          \ \nHmm, there's gotta be a better way of keeping track of this than just\
          \ looking through all the previous answers all the time.\""
        inputs:
          x: '{{highest}}'
        name: IsGreaterThanOrEqualTo
        param_changes: []
      - dest: Worst Case Finished
        feedback:
        - That's right!
        inputs:
          x: '{{worstnum}}'
        name: Equals
        param_changes: []
      - dest: worst case bigger
        feedback:
        - '"Let''s say that the number is bigger than that"'
        inputs:
          x: '{{middle}}'
        name: IsLessThan
        param_changes: []
      - dest: worst case smaller
        feedback:
        - '"Let''s say that the number is smaller than that"'
        inputs:
          x: '{{middle}}'
        name: IsGreaterThanOrEqualTo
        param_changes: []
      - dest: Picking in the middle
        feedback:
        - '"Hmm, I don''t know if that was the best guess to make.

          Suppose I say that the number is smaller than that. Then we know that the
          number has to be bigger than {{lowest}} but smaller than {{answer}}. But
          that still leaves a range of {{answer|int-lowest|int-2}} numbers! I think
          that''s too many, we can do better."'
        inputs:
          x: '{{upperBound}}'
        name: IsGreaterThan
        param_changes: []
      - dest: Picking in the middle
        feedback:
        - '"Hmm, I don''t know if that was the best guess to make.

          Suppose I say that the number is bigger than that. Then we know that the
          number has to be bigger than {{answer}} but smaller than {{highest}}. But
          that still leaves a range of {{highest|int-answer|int-2}} numbers! I think
          that''s too many, we can do better."'
        inputs:
          x: '{{lowerBound}}'
        name: IsLessThan
        param_changes: []
      - dest: Worst Case Guess
        feedback:
        - '{{rangeSize}}

          {{worstnum}}

          {{answer}}

          {{middle}}'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"OK, now you try it out.<br>Pretend we''re guessing a number from 1 to
      10. You pick what number to guess, and I''ll say what the worst case woud be."'
  name: Middle try it out
  param_changes: []
  widget:
    customization_args:
      choices:
        value:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
        - '8'
        - '9'
        - '10'
        - OK, I understand now! Let's move on.
    handlers:
    - name: submit
      rule_specs:
      - dest: Middle Explanation
        feedback: []
        inputs:
          x: 10
        name: Equals
        param_changes: []
      - dest: Middle try it out
        feedback:
        - 'If it''s less than {{(answer|int)+1}}, then the number is between 1 and
          {{answer}}. That is a range of {{answer}} numbers. {{"Oh wait, it doesn''t
          make sense for the number to be less than 1! We''re guessing a number between
          1 and 10!" if 0==(answer|int) else ""}}


          If it IS {{(answer|int)+1}}, then we''re done! that''s definitely not the
          worst case though.


          if it''s bigger than {{(answer|int)+1}}, then it''s between {{(answer|int)+2}}
          and 10. That''s a range of {{9-(answer|int)}} numbers. {{"Oh wait, it doesn''t
          make sense for the number to be bigger than 10! We''re guessing a number
          between 1 and 10!" if 9==(answer|int) else ""}}'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: '"I see a pattern! the closer we are to the middle between 1 and 10, the
      better the worst case is! so to get the <b>best worst case</b>, we have to guess
      as close to the middle as possible."<br><br>"So in this case, if we guess either
      5 or 6, the worst case will be that the new range is 5 numbers long. That''s
      the best we can do!"<br><br>"(there''s no whole number exactly between 1 and
      10... we could of course try guessing 5 and a half, but that doesn''t make a
      whole lot of sense!)"'
  name: Middle Explanation
  param_changes: []
  widget:
    customization_args:
      choices:
        value:
        - Alright, that makes sense! let me try that out!
        - That kind of makes sense. But what are we getting the middle of, and how
          do we keep track of these limits?
    handlers:
    - name: submit
      rule_specs:
      - dest: Worst Case start
        feedback: []
        inputs:
          x: 0
        name: Equals
        param_changes: []
      - dest: Ranges
        feedback: []
        inputs:
          x: 1
        name: Equals
        param_changes: []
      - dest: Middle Explanation
        feedback:
        - ERROR
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: MultipleChoiceInput
- content:
  - type: text
    value: '"OK, suppose that we knew the number was bigger than {{lowest}} but smaller
      than {{highest}}."<br><br>"And suppose we guess {{guess}}, and the magician
      tells us it''s {{comparison}} than that."<br><br>What''s the new <b>upper limit</b>?
      That is, what is our number <b>smaller than</b>?'
  name: practice ranges
  param_changes:
  - name: lowest
    obj_type: UnicodeString
    values:
    - '1'
    - '2'
    - '3'
    - '4'
    - '5'
  - name: highest
    obj_type: UnicodeString
    values:
    - '10'
    - '11'
    - '12'
    - '13'
  - name: guess
    obj_type: TemplatedString
    values:
    - '6'
    - '7'
    - '8'
    - '9'
  - name: comparison
    obj_type: UnicodeString
    values:
    - bigger
    - smaller
  - name: newLowest
    obj_type: UnicodeString
    values:
    - '{{ lowest if comparison=="smaller" else guess}}'
  - name: newHighest
    obj_type: TemplatedString
    values:
    - '{{ highest if comparison=="bigger" else guess}}'
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: practice ranges lowest
        feedback:
        - '"Yep!"'
        inputs:
          x: '{{newHighest}}'
        name: Equals
        param_changes: []
      - dest: practice ranges
        feedback:
        - Well, technically that's true... it does have to be smaller than {{answer}}.
          But we can be even more precise!
        inputs:
          x: '{{newHighest}}'
        name: IsGreaterThan
        param_changes: []
      - dest: practice ranges
        feedback:
        - No, we can't really say that!
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
- content:
  - type: text
    value: '"OK, so what is our <b>lower limit</b>? what does the number have to be
      greater than?"'
  name: practice ranges lowest
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - dest: Worst Case start
        feedback:
        - '"You got it! Alright, now let''s practice the whole game!"'
        inputs:
          x: '{{newLowest}}'
        name: Equals
        param_changes: []
      - dest: practice ranges lowest
        feedback:
        - '"Technically, it does have to be smaller than {{answer}}... but that''s
          not the best we can do! What''s the biggest number it has to be smaller
          than?"'
        inputs:
          x: '{{newLowest}}'
        name: IsLessThan
        param_changes: []
      - dest: practice ranges lowest
        feedback:
        - '"No, that''s not right... the number doesn''t have to be bigger than that
          based on the information we have."'
        inputs: {}
        name: Default
        param_changes: []
    sticky: false
    widget_id: NumericInput
