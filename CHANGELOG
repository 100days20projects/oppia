This file contains a summary of changes to the Oppia code base. For a full changelog, please see 

    https://code.google.com/p/oppia/source/list


v1.1.1 (2 Dec 2013)
-------------------
New features:
* Oppia explorations can now be easily embedded in any webpage using the oppia-player-0.0.0.js script in the static/scripts directory. This is done by using an <oppia/> tag at the place where the exploration should be embedded, and including the aforementioned script at the bottom of the embedding webpage.
* Explorations are now represented as zip files which contain a single YAML file and a directory for static assets.
* Published explorations can now only be deleted by an admin.

Reader-visible improvements:
* Improve the look-and-feel of the gallery page.

Editor improvements:
* Significantly improve the state editor user interface, which now includes contextual help links, a new interface for rules, descriptions of widget parameters, a three-column layout, and numerous other small improvements.
* Improve the saving flow by allowing changes to a state to be batched into a single commit. The user is prompted if he/she tries to close or navigate away from the page before his/her changes are committed to the server.
* Allow each type of object (such as a real number of a music note) to have its own specialized editor.
* Collapse the various non-interactive content textareas into a single textarea, and add controls for including videos, images, links and tabs.

Extensions:
* For the code REPL widget, make it possible for code to be prepended and appended to the reader's submission before the latter is executed, and allow comparison of the output of the reader's program against a reference output.
* Add a "Cities of the World" exploration, which was created programmatically using data from Wikipedia.
* Improve the existing binary search exploration by adding pictures and fixing bugs.

Speed:
* Make explorations load faster by batching datastore operations, and by only retrieving partial exploration statistics when an exploration is first loaded.

Infrastructure:
* Add a versioned file system for each exploration, so that images can be uploaded.
* When a user deletes an exploration, mark it as deleted rather than remove it from the datastore, in case it needs to be reinstated later.

Development:
* Modify the startup scripts to be more modular, and to require as little use of sudo as possible.

Security:
* Add HTML sanitization, XSSI protection, escaping of special characters and various other improvements.

Dependencies:
* Update AngularJS to version 1.2.0-rc.3.
* Use jwysiwyg for the rich text editor, replacing the YUI 2 library.
* Remove the AngularUI dependency in favor of ui-bootstrap.
* Try to load the JQuery and JQueryUI dependencies from the Google CDN before fetching them from the local server.


v1.1.0 (14 Sep 2013)
--------------------
Reader-visible improvements:
* Add better support for LaTeX.
* Improve the scrolling behavior in the reader view.

Editor improvements:
* Make the exploration statistics view much more intuitive: introduce a graph showing what fraction of reader entries reach each state, provide helpful suggestions to improve state content and rules, and add direct links to the state editor to make such improvements easy.
* Add links in the state editor to incoming and destination states for easy navigation.
* Display a warning if the END state for an exploration is unreachable.
* Update the exploration graph when a change is made, without requiring the editor to refresh the page.
* Add simple versioning for explorations.

Extensions:
* Add interactive widgets for code REPL and file input.
* Add new binary search and tar explorations; rewrite the combinatorics and welcome explorations.
* Allow customization of the text on the button for the Continue widget.

Admin page:
* Add a link to a simple admin page for app owners.
* Add latency and memcache counters.
* Allow an admin to reload individual demo explorations.

Domain models and infrastructure:
* Substantial cleanup of the domain modelling across the entire backend.
* Finalize v1 of the exploration data file schema.
* Rewrite the statistics models to be more conceptually expressive.
* Add pluggable storage models, thus allowing Oppia to run on Django as well as App Engine.
* Add a new datastore model for app configuration properties.
* Replace the classifier datastore model with individual rule domain objects to improve flexibility.
* Add a registry for widgets, and take them out of the datastore; they now run at the code level.
* Add a new parameter value generator extension framework, and some examples.
* Allow explorations to define custom skins for the reader view.
* Add memcache functionality.
* Add transactions around exploration update operations.

Testing:
* Add karma test framework for the frontend.
* Add lots of backend and frontend tests.
* Add flags that allow individual tests and tests within a particular class or module to be run, instead of the entire suite.
* Add a flag that allows slow tests to be omitted from a test run.
* Added a test runner that 'plays through' reader explorations.

Development:
* Start scripts now run on (at least) Ubuntu Linux and Mac.

Security:
* Add CSRF protection.


v1.0.5 (30 Jun 2013)
--------------------
* Add support for initializing parameters at the exploration level.
* Allow custom static views to be specified for rendering reader responses. (Previously, the answer was simply rendered as a string in all cases.)
* Allow an arbitrary number of non-interactive widgets to be included as part of the content of a state.
* Add a "My Explorations" page which lists the improvable states for all explorations that a user can edit, ranked by priority.
* Add more data to the exploration statistics page.
* Tidy up the appearance of the exploration graph visualization.
* Allow tests to be run on individual subdirectories by passing in a flag to the test script.

v1.0.4 (28 Apr 2013)
--------------------
* Add tooltips for progress bars in the exploration statistics page.
* Add information in the exploration statistics page about the number of readers who left an exploration without submitting an answer.
* Add a new exploration ('Parametrized Adventure') showing how parameters can be used to retain the reader's state.
* Fix a routing bug that caused the state editor page to occasionally break when reloaded.
* Upgrade App Engine version from 1.7.4 to 1.7.7.
* In progress: Add dataset functionality, so that editors can easily upload many questions that have the same type but different parameters; Oppia would pick a random one to show the reader.
* In progress: Add exploration-level parameter initialization.
* Change the format of the exploration YAML files used to store the default explorations, to include exploration-level initial parameters.
* Add tests to cover all models except Statistics.
* Restructure the codebase slightly to ease the upcoming port of Oppia to the django-nonrel framework.

v1.0.3 (13 Apr 2013)
--------------------
* Allow the same interactive widget to persist through multiple rounds of reader answers so that the reader does not lose previous work. (The widget still disappears when the reader moves to a state that uses a different interactive widget.)
* Add markers for previous reader answers to the interactive map widget, as an example of the previous point.
* Add an admin handler that allows an admin to reload the default explorations.
* In the statistics dashboard, show detailed exploration statistics for every rule (not just the default one).
* Start a migration to typed objects with their own normalizers and view/edit templates. Remove the old normalizers.
* Bug fixes and general tidying up.
* Security fixes.

v1.0.2 (6 Apr 2013)
-------------------
* Add an interactive map widget, a classifier for 2D coordinates, and a simple exploration showcasing these.
* Show exploration statistics directly in the state editor, so that it is easy to view and act on readers' answers for individual states. 
* Add an 'unresolved answers' list which keeps track of answers that need to be acted on.
* Add a warning to the editor UI when there are self-loops that do not give the reader any feedback.
* Add more unit tests for the Exploration model.
* Add the Python 2.7 backport of unittest.mock for testing.
* Various UI fixes.

v1.0.1 (29 Mar 2013)
--------------------
* Add hits-per-state data to the statistics page.
* Add responsive CSS support for viewing Oppia in mobile devices.
* Add a 'Give Feedback' handler. The feedback is stored in the datastore.
* Improve the display of the main page, the gallery page and the editor pages by tweaking the CSS.
* After an interaction with the reader on the exploration page, scroll down to show the new content.
* Remove the AugmentedUser class, replacing it instead with datastore queries.
* Update sample explorations
* Security fixes

v1.0 (22 Mar 2013)
------------------
* Initial release

